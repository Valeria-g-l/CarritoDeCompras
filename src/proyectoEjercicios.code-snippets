{'Proyecto completo con App y LogicaClasificacion': {'scope': 'java', 'prefix': 'proyecto-ejercicios', 'body': ['package main;', '', 'import java.util.*;', 'import java.util.Arrays;', 'import java.util.LinkedList;', 'import java.util.Stack;', 'import utils.StudentValidator;', '', 'public class App {', '    public static void main(String[] args) throws Exception {', '        // NO MODIFICAR ESTE C√ìDIGO', '        var estudiante = StudentValidator.validarDatos();', '        System.out.println("üë§ Estudiante: " + estudiante.nombre());', '        System.out.println("‚úâÔ∏è  Correo: " + estudiante.correo());', '        // NO MODIFICAR HASTA AQU√ç', '', '        LogicaClasificacion logica = new LogicaClasificacion();', '', '        // Probar invertirCadena', '        String texto = "Hola Mundo";', '        String invertido = logica.invertirCadena(texto);', '        System.out.println("invertirCadena(\\"" + texto + "\\"): " + invertido);', '', '        // Probar validarSimbolos', '        String expresion = "{[()]}";', '        boolean balanceado = logica.validarSimbolos(expresion);', '        System.out.println("validarSimbolos(\\"" + expresion + "\\"): " + balanceado);', '', '        // Probar ordenarPila', '        Stack<Integer> pila = new Stack<>();', '        pila.push(3);', '        pila.push(1);', '        pila.push(4);', '        pila.push(2);', '        System.out.println("ordenarPila([3, 1, 4, 2]): " + logica.ordenarPila(pila));', '', '        // Probar clasificarPorParidad', '        LinkedList<Integer> original = new LinkedList<>(Arrays.asList(1, 2, 3, 4, 5, 6));', '        System.out.println("clasificarPorParidad([1, 2, 3, 4, 5, 6]): " + logica.clasificarPorParidad(original));', '    }', '}', '', 'class LogicaClasificacion {', '', '    public String invertirCadena(String texto) {', '        Stack<Character> pila = new Stack<>();', '        for (char c : texto.toCharArray()) {', '            pila.push(c);', '        }', '        StringBuilder Sb = new StringBuilder();', '        while (!pila.isEmpty()) {', '            Sb.append(pila.pop());', '        }', '        return Sb.toString();', '    }', '', '    public boolean validarSimbolos(String cad) {', '        Stack<Character> pila = new Stack<>();', '        for (int i = 0; i < cad.length(); i++) {', '            char caracter = cad.charAt(i);', "            if (caracter == '(' || caracter == '{' || caracter == '[') {", '                pila.push(caracter);', '            } else {', '                if (pila.isEmpty()) {', '                    return false;', '                }', '                char apertura = pila.pop();', "                if ((caracter == ')' && apertura != '(') ||", "                    (caracter == '}' && apertura != '{') ||", "                    (caracter == ']' && apertura != '[')) {", '                    return false;', '                }', '            }', '        }', '        return pila.isEmpty();', '    }', '', '    public List<Integer> ordenarPila(Stack<Integer> pila) {', '        Stack<Integer> pilaAuxiliar = new Stack<>();', '        while (!pila.isEmpty()) {', '            int ord = pila.pop();', '            while (!pilaAuxiliar.isEmpty() && pilaAuxiliar.peek() < ord) {', '                pila.push(pilaAuxiliar.pop());', '            }', '            pilaAuxiliar.push(ord);', '        }', '        List<Integer> listaOrdenada = new ArrayList<>();', '        while (!pilaAuxiliar.isEmpty()) {', '            listaOrdenada.add(pilaAuxiliar.pop());', '        }', '        return listaOrdenada;', '    }', '', '    public List<Integer> clasificarPorParidad(LinkedList<Integer> original) {', '        LinkedList<Integer> pares = new LinkedList<>();', '        LinkedList<Integer> impares = new LinkedList<>();', '        for (int i = 0; i < original.size(); i++) {', '            int num = original.get(i);', '            if (num % 2 == 0) {', '                pares.add(num);', '            } else {', '                impares.add(num);', '            }', '        }', '        LinkedList<Integer> resultado = new LinkedList<>();', '        resultado.addAll(pares);', '        resultado.addAll(impares);', '        return resultado;', '    }', '}'], 'description': 'Snippet completo con App y LogicaClasificacion para pruebas'}}